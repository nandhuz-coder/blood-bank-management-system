{"version":3,"file":"static/js/203.1e184f88.chunk.js","mappings":"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","sources":["services/authServices.js","components/shared/Form/Form.js","components/shared/Spinner.js","pages/auth/login.js","components/shared/Form/InputType.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport { userLogin, userRegister } from \"../redux/features/auth/authActions\";\r\nimport { toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { unwrapResult } from \"@reduxjs/toolkit\"; // ✅ Extracts payload properly\r\n\r\nconst useAuthService = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // ✅ Improved Login Function\r\n    const handleLogin = async (e, email, password, role, navigate) => {\r\n        e.preventDefault();\r\n\r\n        if (!role || !email || !password) {\r\n            return toast.error(\"Please provide all fields\");\r\n        }\r\n\r\n        try {\r\n            const resultAction = await dispatch(userLogin({ email, password, role }));\r\n            const data = unwrapResult(resultAction); // ✅ Get API response safely\r\n\r\n            toast.success(\"Login Successful!\");\r\n\r\n            // ✅ Redirect based on user role\r\n            if (data.user?.role === \"admin\") navigate(\"/admin\");\r\n            else if (data.user?.role === \"hospital\") navigate(\"/hospital-page\");\r\n            else navigate(\"/\"); // Default\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(error || \"Login failed. Please try again.\");\r\n        }\r\n    };\r\n\r\n    // ✅ Improved Register Function\r\n    const handleRegister = async (e, formData, navigate) => {\r\n        e.preventDefault();\r\n        console.log(formData);\r\n\r\n        if ( !formData.role || !formData.email || !formData.password) {\r\n            return toast.error(\"Please provide all required fields\");\r\n        }\r\n        try {\r\n            const resultAction = await dispatch(userRegister(formData));\r\n            unwrapResult(resultAction); // ✅ Extract payload\r\n\r\n            toast.success(\"Registration successful! Redirecting to login...\");\r\n            navigate(\"/login\");\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(error || \"Registration failed. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return { handleLogin, handleRegister };\r\n};\r\n\r\nexport default useAuthService;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport InputType from \"./InputType\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useAuthService from \"../../../services/authServices\"; // ✅ Import the hook\r\n\r\nconst Form = ({ formType, submitBtn, formTitle }) => {\r\n  const navigate = useNavigate();\r\n  const { handleLogin, handleRegister } = useAuthService();\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    role: \"donor\",\r\n    name: \"\",\r\n    organisationName: \"\",\r\n    hospitalName: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    website: \"\",\r\n    bloodGroup: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({}); // ✅ Store validation errors\r\n\r\n  const validateForm = () => {\r\n    let newErrors = {};\r\n\r\n    if (!formData.email) {\r\n      newErrors.email = \"Email is required.\";\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = \"Invalid email format.\";\r\n    }\r\n\r\n    if (!formData.password) {\r\n      newErrors.password = \"Password is required.\";\r\n    } else if (formData.password.length < 6) {\r\n      newErrors.password = \"Password must be at least 6 characters.\";\r\n    }\r\n\r\n    if (formType === \"register\") {\r\n      if (formData.role === \"admin\" || formData.role === \"donor\") {\r\n        if (!formData.name) newErrors.name = \"Name is required.\";\r\n      }\r\n\r\n      if (formData.role === \"organisation\" && !formData.organisationName) {\r\n        newErrors.organisationName = \"Organisation Name is required.\";\r\n      }\r\n\r\n      if (formData.role === \"hospital\" && !formData.hospitalName) {\r\n        newErrors.hospitalName = \"Hospital Name is required.\";\r\n      }\r\n\r\n      if (!formData.address) newErrors.address = \"Address is required.\";\r\n\r\n      if (formData.role === \"donor\") {\r\n        if (!formData.bloodGroup) newErrors.bloodGroup = \"Blood Group is required.\";\r\n      }\r\n\r\n      if (!formData.phone) {\r\n        newErrors.phone = \"Phone number is required.\";\r\n      } else if (!/^\\d{10}$/.test(formData.phone)) {\r\n        newErrors.phone = \"Phone number must be 10 digits.\";\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0; // ✅ Returns `true` if no errors\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    // Clear validation error when user types\r\n    setErrors((prevErrors) => ({ ...prevErrors, [e.target.name]: \"\" }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) return;\r\n\r\n    if (formType === \"login\") {\r\n      handleLogin(e, formData.email, formData.password, formData.role, navigate);\r\n    } else {\r\n      handleRegister(e, formData, navigate);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <h1 className=\"text-center\">{formTitle}</h1>\r\n        <hr />\r\n\r\n        {/* Role Selection */}\r\n        <div className=\"d-flex mb-3\">\r\n          {[\"donor\", \"admin\", \"organisation\", \"hospital\"].map((option) => (\r\n            <div key={option} className=\"form-check ms-2\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                name=\"role\"\r\n                id={`${option}Radio`}\r\n                value={option}\r\n                onChange={handleChange}\r\n                checked={formData.role === option}\r\n              />\r\n              <label htmlFor={`${option}Radio`} className=\"form-check-label\">\r\n                {option.charAt(0).toUpperCase() + option.slice(1)}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Form Inputs */}\r\n        {formType === \"login\" ? (\r\n          <>\r\n            <InputType labelFor=\"email\" labelText=\"Email\" inputType=\"email\" name=\"email\" value={formData.email} onChange={handleChange} autoComplete=\"email\" />\r\n            {errors.email && <p className=\"text-danger\">{errors.email}</p>}\r\n\r\n            <InputType labelFor=\"password\" labelText=\"Password\" inputType=\"password\" name=\"password\" value={formData.password} onChange={handleChange} autoComplete=\"current-password\" />\r\n            {errors.password && <p className=\"text-danger\">{errors.password}</p>}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {(formData.role === \"admin\" || formData.role === \"donor\") && (\r\n              <>\r\n                <InputType labelFor=\"name\" labelText=\"Name\" inputType=\"text\" name=\"name\" value={formData.name} onChange={handleChange} autoComplete=\"name\" />\r\n                {errors.name && <p className=\"text-danger\">{errors.name}</p>}\r\n              </>\r\n            )}\r\n\r\n            {formData.role === \"organisation\" && (\r\n              <>\r\n                <InputType labelFor=\"organisationName\" labelText=\"Organisation Name\" inputType=\"text\" name=\"organisationName\" value={formData.organisationName} onChange={handleChange} />\r\n                {errors.organisationName && <p className=\"text-danger\">{errors.organisationName}</p>}\r\n              </>\r\n            )}\r\n\r\n            {formData.role === \"hospital\" && (\r\n              <>\r\n                <InputType labelFor=\"hospitalName\" labelText=\"Hospital Name\" inputType=\"text\" name=\"hospitalName\" value={formData.hospitalName} onChange={handleChange} />\r\n                {errors.hospitalName && <p className=\"text-danger\">{errors.hospitalName}</p>}\r\n              </>\r\n            )}\r\n\r\n            <InputType labelFor=\"email\" labelText=\"Email\" inputType=\"email\" name=\"email\" value={formData.email} onChange={handleChange} autoComplete=\"email\" />\r\n            {errors.email && <p className=\"text-danger\">{errors.email}</p>}\r\n\r\n            <InputType labelFor=\"password\" labelText=\"Password\" inputType=\"password\" name=\"password\" value={formData.password} onChange={handleChange} autoComplete=\"new-password\" />\r\n            {errors.password && <p className=\"text-danger\">{errors.password}</p>}\r\n\r\n            <InputType labelFor=\"address\" labelText=\"Address\" inputType=\"text\" name=\"address\" value={formData.address} onChange={handleChange} />\r\n            {errors.address && <p className=\"text-danger\">{errors.address}</p>}\r\n\r\n            <InputType labelFor=\"phone\" labelText=\"Phone\" inputType=\"tel\" name=\"phone\" value={formData.phone} onChange={handleChange} pattern=\"[0-9]{10}\" placeholder=\"10-digit number\" />\r\n            {errors.phone && <p className=\"text-danger\">{errors.phone}</p>}\r\n\r\n            {formData.role === \"donor\" && (\r\n              <>\r\n                <InputType labelFor=\"bloodGroup\" labelText=\"Blood Group\" inputType=\"text\" name=\"bloodGroup\" value={formData.bloodGroup} onChange={handleChange} placeholder=\"O+, O-, AB+, AB-, A-, A+, B-,B+\" />\r\n                {errors.bloodGroup && <p className=\"text-danger\">{errors.bloodGroup}</p>}\r\n              </>\r\n            )}\r\n\r\n            <InputType labelFor=\"website\" labelText=\"Website\" inputType=\"url\" name=\"website\" value={formData.website} onChange={handleChange} placeholder=\"https://example.com\" />\r\n            {errors.website && <p className=\"text-danger\">{errors.website}</p>}\r\n          </>\r\n        )}\r\n\r\n        {/* Footer */}\r\n        <div className=\"d-flex flex-row justify-content-between\">\r\n          <p>\r\n            {formType === \"login\" ? (\r\n              <>\r\n                Not registered yet? <Link to=\"/register\">Register Here!</Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                Already a user? <Link to=\"/login\">Login Here!</Link>\r\n              </>\r\n            )}\r\n          </p>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            {submitBtn}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className='loader-container'>\r\n      <div className='loader'></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useEffect } from \"react\";\r\nimport Form from \"../../components/shared/Form/Form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Spinner from \"../../components/shared/Spinner\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Login = () => {\r\n  const { loading, error } = useSelector((state) => state.auth);\r\n\r\n  // Show toast when there's an error\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error, {\r\n        position: \"top-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"colored\",\r\n      });\r\n    }\r\n  }, [error]);\r\n\r\n  return (\r\n    <>\r\n      {/* Toast Container (Required for displaying toasts) */}\r\n      <div>\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className=\"row g-0\">\r\n            {/* Left Side - Image */}\r\n            <div className=\"col-md-8 form-banner\">\r\n              <img src=\"/assets/images/banner1.jpg\" alt=\"Login Banner\" />\r\n            </div>\r\n\r\n            {/* Right Side - Form */}\r\n            <div className=\"col-md-4 form-container\">\r\n              <Form formTitle={\"Login Page\"} submitBtn={\"Login\"} formType={\"login\"} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst InputType = ({\r\n  labelFor,\r\n  labelText,\r\n  value = \"\",\r\n  onChange,\r\n  name,\r\n  inputType = \"text\",\r\n  placeholder = \"\",\r\n  required = false,\r\n  min,\r\n  max\r\n}) => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label htmlFor={labelFor} className=\"form-label\">\r\n        {labelText}\r\n      </label>\r\n      <input\r\n        className=\"form-control\"\r\n        id={labelFor}  \r\n        type={inputType}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        required={required}\r\n        min={min}\r\n        max={max}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputType;\r\n"],"names":["useAuthService","dispatch","useDispatch","handleLogin","async","e","email","password","role","navigate","preventDefault","toast","error","_data$user","_data$user2","resultAction","userLogin","data","unwrapResult","success","user","console","handleRegister","formData","log","userRegister","_ref","formType","submitBtn","formTitle","useNavigate","setFormData","useState","name","organisationName","hospitalName","address","phone","website","bloodGroup","errors","setErrors","handleChange","target","value","prevErrors","_jsx","children","_jsxs","onSubmit","validateForm","newErrors","test","length","Object","keys","className","map","option","type","id","onChange","checked","htmlFor","charAt","toUpperCase","slice","_Fragment","InputType","labelFor","labelText","inputType","autoComplete","pattern","placeholder","Link","to","Spinner","Login","loading","useSelector","state","auth","useEffect","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","src","alt","Form","required","min","max"],"sourceRoot":""}