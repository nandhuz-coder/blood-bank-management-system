{"version":3,"file":"static/js/651.28fe84ea.chunk.js","mappings":"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","sources":["components/shared/Layout/Header.js","pages/Dashboard/Analytics.js"],"sourcesContent":["import React from 'react';\r\nimport { BiDonateBlood, BiUserCircle } from 'react-icons/bi';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { logout } from '../../../redux/features/auth/authSlice';\r\n\r\nconst Header = () => {\r\n  const { user } = useSelector(state => state.auth);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const CustomCloseButton = ({ closeToast }) => (\r\n    <div>\r\n      <button\r\n        className=\"btn btn-sm btn-danger me-2\"\r\n        onClick={() => {\r\n          confirmLogout(true); // Logout\r\n          closeToast(); // Close the toast\r\n        }}\r\n      >\r\n        Yes\r\n      </button>\r\n      <button className=\"btn btn-sm btn-secondary\" onClick={closeToast}>\r\n        No\r\n      </button>\r\n    </div>\r\n  );\r\n  const handleLogout = () => {\r\n    toast.warn(\"Are you sure you want to logout?\", {\r\n      position: \"top-center\",\r\n      autoClose: false,\r\n      closeOnClick: false,\r\n      draggable: false,\r\n      closeButton: (props) => <CustomCloseButton {...props} />,\r\n    });\r\n  };\r\n\r\n\r\n  const confirmLogout = (confirm) => {\r\n    if (confirm) {\r\n      dispatch(logout());\r\n      toast.success(\"Logged out successfully!\");\r\n      navigate(\"/login\");\r\n    } else {\r\n      toast.dismiss();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className='navbar navbar-expand-lg navbar-light bg-light shadow-sm p-2'>\r\n      <div className='container-fluid d-flex justify-content-between align-items-center'>\r\n        <div className='navbar-brand d-flex align-items-center'>\r\n          <BiDonateBlood color='red' size={28} className=\"me-2\" />\r\n          <span className=\"fw-bold\">Blood Bank App</span>\r\n        </div>\r\n\r\n        <ul className='navbar-nav d-flex align-items-center'>\r\n          <li className='nav-item mx-3'>\r\n            <span className='nav-link d-flex align-items-center'>\r\n              <BiUserCircle size={22} className=\"me-1\" />\r\n              {user?.name || user?.hospitalName} &nbsp;\r\n              <span className=\"badge bg-secondary\">{user?.role}</span>\r\n            </span>\r\n          </li>\r\n\r\n          {\r\n            <li className='nav-item mx-3'>\r\n              <Link to=\"/\" className='nav-link'>Home</Link>\r\n            </li>\r\n          }\r\n\r\n          <li className='nav-item mx-3'>\r\n            <button className='btn btn-danger' onClick={handleLogout}>Logout</button>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../../components/shared/Layout/Header\";\r\nimport API from \"./../../services/API\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst Analytics = () => {\r\n  const [data, setData] = useState([]);\r\n  const colors = [\"#A0BFE0\", \"#7895CB\", \"#F2EAD3\", \"#A2CDB0\", \"#FF8551\", \"#FFDEDE\", \"#A2FF86\", \"#E1ECC8\"];\r\n  const [inventoryData, setInventoryData] = useState([]);\r\n  //GET BLOOD GROUP DATA\r\n  const getBloodGroupData = async () => {\r\n    try {\r\n      const { data } = await API.get(\"/analytics/bloodGroups-data\");\r\n      if (data?.success) {\r\n        setData(data?.bloodGroupData);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  //lifrecycle method\r\n  useEffect(() => {\r\n    getBloodGroupData();\r\n  }, []);\r\n\r\n  const getBloodRecords = async () => {\r\n    try {\r\n      const { data } = await API.get(\"/inventory/get-recent-inventory\");\r\n      if (data?.success) {\r\n        setInventoryData(data?.inventory);\r\n        // console.log(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBloodRecords();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"d-flex flex-row flex-wrap\">\r\n        {data?.map((record, i) => (\r\n          <div className=\"card m-4 p-1\"\r\n            key={i}\r\n            style={{ width: \"20rem\", backgroundColor: `${colors[i]}` }}>\r\n            <div className=\"card-body\">\r\n              <h1 className=\"card-title bg-light text-dark text-center\">{record.bloodGroup}</h1>\r\n              <p className=\"card-text\">\r\n                Total In: <b>{record.totalIn}</b> (ML)\r\n              </p>\r\n              <p className=\"card-text\">\r\n                Total Out: <b>{record.totalOut}</b> (ML)\r\n              </p>\r\n            </div>\r\n            <div className=\"card-footer text-light bg-dark text-center\">\r\n              Total available:<b>{record.availableBlood}</b> (ML)\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"container mt-3\">\r\n        <h1 className=\"my-3\">Recent Blood Transactions</h1>\r\n        <table className=\"table  \">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Blood Group</th>\r\n              <th scope=\"col\">Inventory Type</th>\r\n              <th scope=\"col\">Quantity</th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Date & Time</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {inventoryData?.map((record) => (\r\n              <tr key={record._id}>\r\n                <td>{record.bloodGroup}</td>\r\n                <td>{record.inventoryType}</td>\r\n                <td>{record.quantity} (ML)</td>\r\n                <td>{record.email}</td>\r\n                <td>\r\n                  {moment(record.createdAt).format(\"DD/MM/YYYY hh:mm A\")}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Analytics;\r\n"],"names":["Header","user","useSelector","state","auth","dispatch","useDispatch","navigate","useNavigate","CustomCloseButton","_ref","closeToast","_jsxs","children","_jsx","className","onClick","confirmLogout","confirm","logout","toast","success","dismiss","BiDonateBlood","color","size","BiUserCircle","name","hospitalName","role","Link","to","handleLogout","warn","position","autoClose","closeOnClick","draggable","closeButton","props","Analytics","data","setData","useState","colors","inventoryData","setInventoryData","useEffect","async","API","get","bloodGroupData","error","console","log","getBloodGroupData","inventory","getBloodRecords","_Fragment","map","record","i","style","width","backgroundColor","bloodGroup","totalIn","totalOut","availableBlood","scope","inventoryType","quantity","email","moment","createdAt","format","_id"],"sourceRoot":""}