{"version":3,"file":"static/js/657.6e05be9e.chunk.js","mappings":"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","sources":["components/shared/Layout/Header.js","components/shared/Spinner.js","components/shared/Modals/Modal.js","pages/HomePage.js","components/shared/Form/InputType.js","components/shared/Layout/Sidebar.js","components/shared/Layout/Layout.js"],"sourcesContent":["import React from 'react';\r\nimport { BiDonateBlood, BiUserCircle } from 'react-icons/bi';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { logout } from '../../../redux/features/auth/authSlice';\r\n\r\nconst Header = () => {\r\n  const { user } = useSelector(state => state.auth);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const CustomCloseButton = ({ closeToast }) => (\r\n    <div>\r\n      <button\r\n        className=\"btn btn-sm btn-danger me-2\"\r\n        onClick={() => {\r\n          confirmLogout(true); // Logout\r\n          closeToast(); // Close the toast\r\n        }}\r\n      >\r\n        Yes\r\n      </button>\r\n      <button className=\"btn btn-sm btn-secondary\" onClick={closeToast}>\r\n        No\r\n      </button>\r\n    </div>\r\n  );\r\n  const handleLogout = () => {\r\n    toast.warn(\"Are you sure you want to logout?\", {\r\n      position: \"top-center\",\r\n      autoClose: false,\r\n      closeOnClick: false,\r\n      draggable: false,\r\n      closeButton: (props) => <CustomCloseButton {...props} />,\r\n    });\r\n  };\r\n\r\n\r\n  const confirmLogout = (confirm) => {\r\n    if (confirm) {\r\n      dispatch(logout());\r\n      toast.success(\"Logged out successfully!\");\r\n      navigate(\"/login\");\r\n    } else {\r\n      toast.dismiss();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className='navbar navbar-expand-lg navbar-light bg-light shadow-sm p-2'>\r\n      <div className='container-fluid d-flex justify-content-between align-items-center'>\r\n        <div className='navbar-brand d-flex align-items-center'>\r\n          <BiDonateBlood color='red' size={28} className=\"me-2\" />\r\n          <span className=\"fw-bold\">Blood Bank App</span>\r\n        </div>\r\n\r\n        <ul className='navbar-nav d-flex align-items-center'>\r\n          <li className='nav-item mx-3'>\r\n            <span className='nav-link d-flex align-items-center'>\r\n              <BiUserCircle size={22} className=\"me-1\" />\r\n              {user?.name || user?.hospitalName} &nbsp;\r\n              <span className=\"badge bg-secondary\">{user?.role}</span>\r\n            </span>\r\n          </li>\r\n\r\n          {\r\n            <li className='nav-item mx-3'>\r\n              <Link to=\"/\" className='nav-link'>Home</Link>\r\n            </li>\r\n          }\r\n\r\n          <li className='nav-item mx-3'>\r\n            <button className='btn btn-danger' onClick={handleLogout}>Logout</button>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className='loader-container'>\r\n      <div className='loader'></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport InputType from \"./../Form/InputType\";\r\nimport API from \"./../../../services/API\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Modal = () => {\r\n  const [inventoryType, setInventoryType] = useState(\"in\");\r\n  const [bloodGroup, setBloodGroup] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [errors, setErrors] = useState({}); // Store validation errors\r\n\r\n  const { user } = useSelector((state) => state.auth);\r\n\r\n  const validateForm = () => {\r\n    let newErrors = {};\r\n\r\n    if (!bloodGroup) newErrors.bloodGroup = \"Please select a blood group.\";\r\n\r\n    if (!email.trim()) {\r\n      newErrors.email = \"Email is required.\";\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n      newErrors.email = \"Invalid email format.\";\r\n    }\r\n\r\n    if (!quantity || quantity <= 0) {\r\n      newErrors.quantity = \"Quantity must be greater than 0.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleModalSubmit = async () => {\r\n    if (!validateForm()) return; // Prevent API call if validation fails\r\n\r\n    try {\r\n      const { data } = await API.post(\"/inventory/create-inventory\", {\r\n        email,\r\n        organisation: user?._id,\r\n        inventoryType,\r\n        bloodGroup,\r\n        quantity: parseInt(quantity),\r\n      });\r\n\r\n      if (data?.success) {\r\n        toast.success(\"New Record Created\");\r\n        setBloodGroup(\"\");\r\n        setQuantity(\"\");\r\n        setEmail(\"\");\r\n        document.getElementById(\"modal-close-btn\").click(); // Close modal\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Something went wrong\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Modal */}\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"staticBackdrop\"\r\n        data-bs-backdrop=\"static\"\r\n        data-bs-keyboard=\"false\"\r\n        tabIndex={-1}\r\n        aria-labelledby=\"staticBackdropLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">\r\n                Manage Blood Record\r\n              </h1>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n                id=\"modal-close-btn\"\r\n              />\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {/* Inventory Type Selection */}\r\n              <div className=\"d-flex mb-3\">\r\n                <label className=\"me-2\">Blood Type:</label>\r\n                {[\"in\", \"out\"].map((type) => (\r\n                  <div className=\"form-check ms-3\" key={type}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"inventoryType\"\r\n                      checked={inventoryType === type}\r\n                      value={type}\r\n                      onChange={(e) => setInventoryType(e.target.value)}\r\n                      className=\"form-check-input\"\r\n                      id={`${type}-radio`}\r\n                    />\r\n                    <label htmlFor={`${type}-radio`} className=\"form-check-label\">\r\n                      {type.toUpperCase()}\r\n                    </label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Blood Group Selection */}\r\n              <select\r\n                className={`form-select ${errors.bloodGroup ? \"is-invalid\" : \"\"}`}\r\n                value={bloodGroup}\r\n                onChange={(e) => {\r\n                  setBloodGroup(e.target.value);\r\n                  setErrors((prev) => ({ ...prev, bloodGroup: \"\" })); // Clear error when user selects\r\n                }}\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Select Blood Group\r\n                </option>\r\n                {[\"O+\", \"O-\", \"AB+\", \"AB-\", \"A+\", \"A-\", \"B+\", \"B-\"].map((group) => (\r\n                  <option key={group} value={group}>\r\n                    {group}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.bloodGroup && <p className=\"text-danger\">{errors.bloodGroup}</p>}\r\n\r\n              {/* Email Input */}\r\n              <InputType\r\n                labelText={inventoryType === \"in\" ? \"Donor Email\" : \"Hospital Email\"}\r\n                labelFor=\"donorEmail\"\r\n                inputType=\"email\"\r\n                value={email}\r\n                onChange={(e) => {\r\n                  setEmail(e.target.value);\r\n                  setErrors((prev) => ({ ...prev, email: \"\" })); // Clear error\r\n                }}\r\n              />\r\n              {errors.email && <p className=\"text-danger\">{errors.email}</p>}\r\n\r\n              {/* Quantity Input */}\r\n              <InputType\r\n                labelText=\"Quantity (ML)\"\r\n                labelFor=\"quantity\"\r\n                inputType=\"number\"\r\n                min=\"1\"\r\n                value={quantity}\r\n                onChange={(e) => {\r\n                  setQuantity(e.target.value);\r\n                  setErrors((prev) => ({ ...prev, quantity: \"\" })); // Clear error\r\n                }}\r\n              />\r\n              {errors.quantity && <p className=\"text-danger\">{errors.quantity}</p>}\r\n            </div>\r\n\r\n            {/* Modal Footer */}\r\n            <div className=\"modal-footer\">\r\n              <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\r\n                Close\r\n              </button>\r\n              <button type=\"button\" className=\"btn btn-primary\" onClick={handleModalSubmit}>\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Spinner from \"../components/shared/Spinner\";\r\nimport Layout from \"../components/shared/Layout/Layout\";\r\nimport Modal from \"../components/shared/Modals/Modal\";\r\nimport API from \"../services/API\";\r\nimport moment from \"moment\";\r\n\r\nconst HomePage = () => {\r\n  const { loading, error, user } = useSelector((state) => state.auth);\r\n  const [data, setData] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  // ✅ Fetch data function\r\n  const getBloodRecords = async () => {\r\n    try {\r\n      const { data } = await API.get(\"/inventory/get-inventory\");\r\n      if (data?.success) {\r\n        setData(data?.inventory);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBloodRecords();\r\n  }, []);\r\n\r\n  // ✅ Handle Navigation in `useEffect`\r\n  useEffect(() => {\r\n    if (user?.role === \"admin\") navigate(\"/admin\");\r\n    else if (user?.role === \"donor\") navigate(\"/donor-page\");\r\n    else if (user?.role === \"hospital\") navigate(\"/hospital-page\");\r\n  }, [user, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error);\r\n    }\r\n  }, [error]);\r\n\r\n  return (\r\n    <Layout>\r\n      <ToastContainer />\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <div className=\"container\">\r\n          <h4\r\n            className=\"ms-4\"\r\n            data-bs-toggle=\"modal\"\r\n            data-bs-target=\"#staticBackdrop\"\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <i className=\"fa-solid fa-plus text-success py-4\"></i>\r\n            Add Inventory\r\n          </h4>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Blood Group</th>\r\n                <th scope=\"col\">Inventory Type</th>\r\n                <th scope=\"col\">Quantity</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">Date & Time</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data?.map((record) => (\r\n                <tr key={record._id}>\r\n                  <td>{record.bloodGroup}</td>\r\n                  <td>{record.inventoryType}</td>\r\n                  <td>{record.quantity} (ML)</td>\r\n                  <td>{record.email}</td>\r\n                  <td>{moment(record.createdAt).format(\"DD/MM/YYYY hh:mm A\")}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <Modal />\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n\r\nconst InputType = ({\r\n  labelFor,\r\n  labelText,\r\n  value = \"\",\r\n  onChange,\r\n  name,\r\n  inputType = \"text\",\r\n  placeholder = \"\",\r\n  required = false,\r\n  min,\r\n  max\r\n}) => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label htmlFor={labelFor} className=\"form-label\">\r\n        {labelText}\r\n      </label>\r\n      <input\r\n        className=\"form-control\"\r\n        id={labelFor}  \r\n        type={inputType}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        required={required}\r\n        min={min}\r\n        max={max}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputType;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport \"../../../Styles/Layout.css\";\r\n\r\nconst Sidebar = () => {\r\n  const location = useLocation();\r\n  const { user } = useSelector(state => state.auth);\r\n\r\n  // Sidebar menu based on user roles\r\n  const sidebarMenu = {\r\n    donor: [\r\n      { path: \"/donation\", name: \"Donation\", icon: \"fa-solid fa-hand-holding-medical\" },\r\n    ],\r\n    hospital: [\r\n      { path: \"/consumer\", name: \"Consumer\", icon: \"fa-solid fa-hospital\" },\r\n    ],\r\n    admin: [\r\n      { path: \"/donor-list\", name: \"Donor List\", icon: \"fa-solid fa-hand-holding-medical\" },\r\n      { path: \"/hospital-list\", name: \"Hospital List\", icon: \"fa-solid fa-hospital\" },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"menu\">\r\n        {(sidebarMenu[user?.role] || []).map((item) => (\r\n          <div\r\n            key={item.path}\r\n            className={`menu-item ${location.pathname === item.path ? \"active\" : \"\"}`}\r\n          >\r\n            <i className={item.icon}></i>\r\n            <Link to={item.path}>{item.name}</Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Sidebar from './Sidebar';\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n      <div className=\"header fixed-top shadow-sm bg-light\">\r\n        <Header />\r\n      </div>\r\n\r\n      {/* Sidebar + Main Content */}\r\n      <div className=\"d-flex\">\r\n        {/* Sidebar */}\r\n        <div className=\"sidebar\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"content col-md-9\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"],"names":["Header","user","useSelector","state","auth","dispatch","useDispatch","navigate","useNavigate","CustomCloseButton","_ref","closeToast","_jsxs","children","_jsx","className","onClick","confirmLogout","confirm","logout","toast","success","dismiss","BiDonateBlood","color","size","BiUserCircle","name","hospitalName","role","Link","to","handleLogout","warn","position","autoClose","closeOnClick","draggable","closeButton","props","Spinner","Modal","inventoryType","setInventoryType","useState","bloodGroup","setBloodGroup","quantity","setQuantity","email","setEmail","errors","setErrors","_Fragment","id","tabIndex","type","map","checked","value","onChange","e","target","htmlFor","toUpperCase","prev","disabled","group","InputType","labelText","labelFor","inputType","min","async","validateForm","newErrors","trim","test","Object","keys","length","data","API","post","organisation","_id","parseInt","document","getElementById","click","error","_error$response","_error$response$data","response","message","console","HomePage","loading","setData","useEffect","get","inventory","log","getBloodRecords","Layout","ToastContainer","style","cursor","scope","record","moment","createdAt","format","placeholder","required","max","Sidebar","location","useLocation","donor","path","icon","hospital","admin","item","pathname"],"sourceRoot":""}